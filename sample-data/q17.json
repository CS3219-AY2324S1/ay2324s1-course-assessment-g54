{
    "title": "Serialize and Deserialize Binary Tree",
    "complexity": "hard",
    "categories": [
        "String",
        "Tree",
        "Depth-First Search",
        "Breadth-First Search",
        "Design",
        "Binary Tree",
        "Algorithms"
    ],
    "link": "https://leetcode.com/problems/serialize-and-deserialize-binary-tree/",
    "description": "Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\n\nDesign an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.\n\n**Clarification:** The input/output format is the same as [how LeetCode serializes a binary tree](https://support.leetcode.com/hc/en-us/articles/360011883654-What-does-1-null-2-3-mean-in-binary-tree-representation-). You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.\n\n**Example 1:**\n![](https://assets.leetcode.com/uploads/2020/09/15/serdeser.jpg)\n\n**Input:** root = [1,2,3,null,null,4,5]\n**Output:** [1,2,3,null,null,4,5]\n\n**Example 2:**\n**Input:** root = []\n**Output:** []\n\n**Constraints:**\n* The number of nodes in the tree is in the range `[0, 104]`.\n* `-1000 <= Node.val <= 1000`\n\n"
}