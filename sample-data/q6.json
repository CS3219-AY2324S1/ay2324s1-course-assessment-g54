{
    "title": "Implement Stack using Queues",
    "complexity": "easy",
    "categories": [
        "Stack",
        "Design",
        "Queue",
        "Algorithms"
    ],
    "link": "https://leetcode.com/problems/implement-stack-using-queues/",
    "description": "Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (`push`, `top`, `pop`, and `empty`).\n\nImplement the `MyStack` class:\n\n* `void push(int x)` Pushes element x to the top of the stack.\n* `int pop()` Removes the element on the top of the stack and returns it.\n* `int top()` Returns the element on the top of the stack.\n* `boolean empty()` Returns `true` if the stack is empty, `false` otherwise.\n\n**Notes:**\n* You must use **only** standard operations of a queue, which means that only `push to back`, `peek/pop from front`, `size` and `is empty` operations are valid.\n* Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.\n\n**Example 1:**\n**Input**\n[\"MyStack\", \"push\", \"push\", \"top\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]\n**Output**\n[null, null, null, 2, 2, false]\n**Explanation**\nMyStack myStack = new MyStack();\nmyStack.push(1);\nmyStack.push(2);\nmyStack.top(); // return 2\nmyStack.pop(); // return 2\nmyStack.empty(); // return False\n\n**Constraints:**\n* `1 <= x <= 9`\n* At most `100` calls will be made to `push`, `pop`, `top`, and `empty`.\n* All the calls to `pop` and `top` are valid.\n\n**Follow-up:** Can you implement the stack using only one queue?\n\n"
}