{
    "title": "Longest Common Subsequence",
    "complexity": "medium",
    "categories": [
        "String",
        "Dynamic Programming",
        "Algorithms"
    ],
    "link": "https://leetcode.com/problems/longest-common-subsequence/",
    "description": "Given two strings `text1` and `text2`, return *the length of their longest **common subsequence**.* If there is no **common subsequence**, return `0`.\n\nA **subsequence** of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n\n* For example, `\"ace\"` is a subsequence of `\"abcde\"`.\n\nA **common subsequence** of two strings is a subsequence that is common to both strings.\n\n**Example 1:**\n**Input:** text1 = \"abcde\", text2 = \"ace\" \n**Output:** 3  \n**Explanation:** The longest common subsequence is \"ace\" and its length is 3.\n\n**Example 2:**\n**Input:** text1 = \"abc\", text2 = \"abc\"\n**Output:** 3\n**Explanation:** The longest common subsequence is \"abc\" and its length is 3.\n\n**Example 3:**\n**Input:** text1 = \"abc\", text2 = \"def\"\n**Output:** 0\n**Explanation:** There is no such common subsequence, so the result is 0.\n\n**Constraints:**\n* `1 <= text1.length, text2.length <= 1000`\n* `text1` and `text2` consist of only lowercase English characters.\n\n"
}