{
    "title": "Validate Binary Search Tree",
    "complexity": "medium",
    "categories": [
        "Tree",
        "Depth-First Search",
        "Binary Search Tree",
        "Binary Tree",
        "Algorithms"
    ],
    "link": "https://leetcode.com/problems/validate-binary-search-tree/",
    "description": "Given the `root` of a binary tree, *determine if it is a valid binary search tree (BST)*.\n\nA **valid BST** is defined as follows:\n\n* The left subtree of a node contains only nodes with keys **less than** the node's key.\n* The right subtree of a node contains only nodes with keys **greater than** the node's key.\n* Both the left and right subtrees must also be binary search trees.\n\n**Example 1:**\n![](https://assets.leetcode.com/uploads/2020/12/01/tree1.jpg)\n\n**Input:** root = [2,1,3]\n**Output:** true\n\n**Example 2:**\n![](https://assets.leetcode.com/uploads/2020/12/01/tree2.jpg)\n\n**Input:** root = [5,1,4,null,null,3,6]\n**Output:** false\n**Explanation:** The root node's value is 5 but its right child's value is 4.\n\n**Constraints:**\n* The number of nodes in the tree is in the range `[1, 104]`.\n* `-231 <= Node.val <= 231 - 1`\n\n"
}