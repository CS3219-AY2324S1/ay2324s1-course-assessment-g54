{
    "title": "Linked List Cycle",
    "complexity": "easy",
    "categories": [
        "Hash Table",
        "Linked List",
        "Two Pointers",
        "Algorithms"
    ],
    "link": "https://leetcode.com/problems/linked-list-cycle/",
    "description": "Given `head`, the head of a linked list, determine if the linked list has a cycle in it.\n\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the`next`pointer. Internally, `pos`is used to denote the index of the node thattail's`next`pointer is connected to.**Note that`pos`is not passed as a parameter**.\n\nReturn`true` *if there is a cycle in the linked list*. Otherwise, return `false`.\n\n**Example 1:**\n![](https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png)\n\n**Input:** head = [3,2,0,-4], pos = 1\n**Output:** true\n**Explanation:** There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n\n**Example 2:**\n![](https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png)\n\n**Input:** head = [1,2], pos = 0\n**Output:** true\n**Explanation:** There is a cycle in the linked list, where the tail connects to the 0th node.\n\n**Example 3:**\n![](https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png)\n\n**Input:** head = [1], pos = -1\n**Output:** false\n**Explanation:** There is no cycle in the linked list.\n\n**Constraints:**\n* The number of the nodes in the list is in the range `[0, 104]`.\n* `-105 <= Node.val <= 105`\n* `pos` is `-1` or a **valid index** in the linked-list.\n\n**Follow up:** Can you solve it using `O(1)` (i.e. constant) memory?\n\n"
}