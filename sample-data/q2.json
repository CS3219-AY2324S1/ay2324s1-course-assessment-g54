{
    "question_id": 2,
    "title": "Linked List Cycle",
    "complexity": "easy",
    "categories": ["Hash Table", "Linked List", "Two Pointers", "Algorithms"],
    "link": "https://leetcode.com/problems/linked-list-cycle/",
    "description": "Given `head`, the head of a linked list, determine if the linked list has a cycle in it.<br><br>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the`next`pointer. Internally, `pos`is used to denote the index of the node thattail's`next`pointer is connected to.**Note that`pos`is not passed as a parameter**.<br><br>Return`true` *if there is a cycle in the linked list*. Otherwise, return `false`.<br><br><br><br>**Example 1:** <br>![](https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png)<br>**Input:**  head = [3,2,0,-4], pos = 1<br>**Output:**  true<br>**Explanation:**  There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).<br><br>**Example 2:** <br>![](https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png)<br>**Input:**  head = [1,2], pos = 0<br>**Output:**  true<br>**Explanation:**  There is a cycle in the linked list, where the tail connects to the 0th node.<br><br>**Example 3:** <br>![](https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png)<br>**Input:**  head = [1], pos = -1<br>**Output:**  false<br>**Explanation:**  There is no cycle in the linked list.<br><br><br>**Constraints:** <br>* The number of the nodes in the list is in the range `[0, 104]`.<br>* `-105 <= Node.val <= 105`<br>* `pos` is `-1` or a **valid index** in the linked-list.<br><br><br>**Follow up:**  Can you solve it using `O(1)` (i.e. constant) memory?<br><br>"
}